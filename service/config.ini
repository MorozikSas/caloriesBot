[Telegram]
token = 7488192252:AAEVoHCDWQIkMcoXeQN4dTBhekD0sKlg7hE

[PostgreSQL]
host = 127.0.0.1
port = 5432
database = postgres
user = slavamorozov
;password =

Чтобы скрыть конфиденциальные данные в конфигурационном файле при вмерживании кода в репозиторий на GitHub, вы можете использовать файл `.gitignore`.

Файл `.gitignore` позволяет указать файлы и директории, которые не должны быть включены в репозиторий. Вы можете добавить файл `config.ini` в файл `.gitignore`, чтобы он не был включен в репозиторий.

Однако, если вы хотите сохранить файл `config.ini` в репозитории, но скрыть конфиденциальные данные, то вы можете использовать переменные окружения. Вместо того, чтобы хранить конфиденциальные данные в файле `config.ini`, вы можете использовать переменные окружения в вашем коде Python для доступа к этим данным.

Например, вы можете определить переменные окружения `DB_HOST`, `DB_NAME`, `DB_USER` и `DB_PASSWORD` в вашей операционной системе или в вашем CI/CD-сервисе, и затем использовать их в вашем коде Python для подключения к базе данных. Вот пример кода:

```python
import os
import psycopg2

# Получаем значения переменных окружения
db_host = os.environ.get('DB_HOST')
db_name = os.environ.get('DB_NAME')
db_user = os.environ.get('DB_USER')
db_password = os.environ.get('DB_PASSWORD')

# Подключаемся к базе данных
conn = psycopg2.connect(
    host=db_host,
    database=db_name,
    user=db_user,
    password=db_password
)

# ...
```

Здесь мы используем функцию `os.environ.get()` для получения значений переменных окружения `DB_HOST`, `DB_NAME`, `DB_USER` и `DB_PASSWORD`. Затем мы используем эти значения для подключения к базе данных.

Обратите внимание, что вы должны установить значения переменных окружения в вашей операционной системе или в вашем CI/CD-сервисе, чтобы ваш код Python мог получить доступ к ним.
